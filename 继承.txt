/*
将学生和工人的共性描述提取出来，单独进行描述，
只要让学生和工人与单独描述的这个类有关系，就可以了。

继承：
1.提高了代码的复用性。
2.让类与类之间产生了关系。有了这个关系才有了多条的特性。

注意：千万不要为了获取其他类的功能，简化代码而继承。
必须是类与类之间所属关系才可以继承，所属关系 is a .

Java中：Java只支持单继承，不支持多继承。
因为多继承容易带来安全隐患：当多个父类中定义了相同功能，
当功能内容不同时，不确定要运行哪一个。
但是Java保留了这种机制。并用另一种体现形式来完成表示。多实现。
Java支持多层继承。也就是一个继承体系

如何使用这个继承体系中的功能呢？

想要使用体系，先查阅体系父类的描述，因为父类中定义的该体系中共性功能。
通过了解共性功能，就可以知道该体系的基本功能。
那么这个体系已经可以基本使用了。
那么在具体调用的时，要创建最子类的对象，为什么？
一是因为有可能父类不能创建对象，
二是创建子类对象可以使用更多的功能，包括基本的也包括特有的。

简单一句话：查阅父类功能，创建子类对象使用功能。

子父类出现后，类成员的特点：

类中成员：
1.变量
2.函数
3.构造函数

1.变量
如果子类中出现非私有的同名成员变量时，
子类要访问本类中的变量，用this
子类要访问父类中的同名变量，用super。

super的使用和this的使用几乎一致。
this代表的时本类对象中的引用。
super代表的是父类对象的引用。

2.子父类中的函数

当子类出现和父类一模一样的函数时，
当子类对象调用该函数，会运行子类函数的内容。
如同函数被覆盖一样。

这种情况是函数的另一个特性：重写（覆盖）

当子类继承父类，沿袭了父类的功能，到子类中，
但是子类具备该功能的内容却和父类不一致，
这时，没有必要定义新功能，而是使用覆盖特殊，保留父类的功能意义，并重写功能内容。

覆盖：
1.子类覆盖父类，必须保证子类权限大于父类权限，才可以覆盖，否则编译失败。
2.静态只能覆盖静态。

记住：
重载：只看同名函数的参数列表。
重写：子父类方法要一模一样。

*/
class Person 
{
	String name;
	int age;
}
class Strudent extends Person
{
	void study()
	{
		System.out.println("good study");
	}
}
class Worker extends Person 
{
	void work()
	{
		System.out.mprintln("good work");
	}
}



class Fu
{
	void show()
      {
        System.out.println("fu show");
      } 
}
 class Zi extends Fu
{
  void show()
    {
   System.out.println("zi show");
     }
}